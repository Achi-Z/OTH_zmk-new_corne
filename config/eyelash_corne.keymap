#include <dt-bindings/zmk/mouse.h>
#include <input/processors.dtsi>
#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>
#include <dt-bindings/zmk/pointing.h>
#include <dt-bindings/zmk/pointing.h>
#include <dt-bindings/zmk/pointing.h>
#include <dt-bindings/zmk/rgb.h>

/*

   &mmv_input_listener {
       input-processors = <&zip_xy_scaler 2 1>;
   };

   &msc_input_listener {
       input-processors = <&zip_xy_scaler 2 1>;
   };

 */

#define ZMK_MOUSE_DEFAULT_MOVE_VAL 1200  // 600
#define ZMK_MOUSE_DEFAULT_SCRL_VAL 20    // 10

&mt {
//    flavor = "tap-preferred";	//优先识别为点击而非长按
    hold-trigger-on-release=y;      //确保长按仅在释放时触发，避免短按延迟
//    tap-ms = <100>;             //将默认200ms降低到100ms
    tapping-term-ms = <500>;        //默认200ms，可据需要调整    :500
    quick-tap-ms = <100>;           //降低快速点按的判定时间,默认可能是200ms，减少到80ms试试
};

/ {
    behaviors {
        //        Xdot_dance_shift2capslock: Xdot_dance_shift2capslock {
        //            compatible = "zmk,behavior-tap-dance";
        //            display-name = "Shift/Caps Lock Tap Dance";
        //            #binding-cells = <0>;
        //            bindings = <&kp LEFT_SHIFT>, <&kp CAPS>;
        //        };
        //
        //        Xdot_dance_alt2shift: Xdot_dance_alt2shift {
        //            compatible = "zmk,behavior-tap-dance";
        //            display-name = "Alt/Shift Tap Dance";
        //            #binding-cells = <0>;
        //
        //            //bindings = <&kp LEFT_ALT>, <&mod_morph_shift>;
        //
        //            bindings = <&kp LEFT_ALT>, <&sk LEFT_SHIFT>;
        //
        //            //tapping-term-ms = <200>;                        // 设置双击时间窗口
        //            //quick-tap-ms = <150>;                           // 短按时间
        //        };

        Xdot_shift2shift: Xdot_shift2shift {
            compatible = "zmk,behavior-tap-dance";
            display-name = "Shift/Shift Tap Dance";
            #binding-cells = <0>;
            bindings = <&kp LEFT_SHIFT>, <&sk LEFT_SHIFT>, <&kp CAPSLOCK>;
        };

        Xdot_alt2caps: Xdot_alt2caps {
            compatible = "zmk,behavior-tap-dance";
            display-name = "Alt/Caps Lock Tap Dance";
            #binding-cells = <0>;

            //bindings = <&kp LEFT_ALT>, <&mod_morph_shift>;

            bindings = <&kp LEFT_ALT>, <&kp CAPS>;

            //tapping-term-ms = <200>;                        // 设置双击时间窗口
            //quick-tap-ms = <150>;                           // 短按时间
        };

        Xdot_del2enter: Xdot_del2enter {
            compatible = "zmk,behavior-tap-dance";
            display-name = "Delete/Delete Tap Dance";
            #binding-cells = <0>;
            bindings = <&lt 3 DELETE>, <&kp BSPC>, <&kp ENTER>;

            tapping-term-ms = <190>;                          // 设置双击时间窗口
            //quick-tap-ms = <150>;                           // 短按时间
        };

        //        Xdot_E_combo: Xdot_E_combo {
        //            compatible = "zmk,behavior-tap-dance";
        //            display-name = "E with Alt3 and WinE";
        //            #binding-cells = <0>;
        //            bindings = <&mt LALT KP_N3 E>, <&kp LG(E)>;
        //
        //            //            tapping-term-ms = <200>;
        //        };

        Xdot_E_combo: Xdot_E_combo {
            compatible = "zmk,behavior-tap-dance";
            display-name = "E with Alt3 and WinE";
            #binding-cells = <0>;
            bindings = <&mt LA(N3) E>, <&kp LG(E)>;
        };

        //        Xdot_R_combo: Xdot_R_combo {
        //            compatible = "zmk,behavior-tap-dance";
        //            display-name = "R with CtrlY and WinR";
        //            #binding-cells = <0>;
        //            bindings = <&mt LCTRL Y R>, <&kp LG(R)>;
        //        };

        Xdot_R_combo: Xdot_R_combo {
            compatible = "zmk,behavior-tap-dance";
            display-name = "R with CtrlY and WinR";
            #binding-cells = <0>;
            bindings = <&mt LC(Y) R>, <&kp LG(R)>;
        };
    };

    rgb_encoder: rgb_encoder {
        compatible = "zmk,behavior-sensor-rotate";
        #sensor-binding-cells = <0>;
        bindings = <&rgb_ug RGB_BRI>, <&rgb_ug RGB_BRD>;
    };

    scroll_encoder: scroll_encoder {
        compatible = "zmk,behavior-sensor-rotate";
        #sensor-binding-cells = <0>;
        bindings = <&msc SCRL_DOWN>, <&msc SCRL_UP>;

        tap-ms = <30>;
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            display-name = "QWERTY";
            bindings = <
&kp TAB            &mt LA(N1) Q  &mt LA(N2) W  &Xdot_E_combo  &Xdot_R_combo  &kp T                                  &kp UP                &kp Y        &kp U        &kp I            &kp O    &kp P     &kp BSPC
&Xdot_shift2shift  &mt LC(A) A   &kp S         &kp D          &mt LC(F) F    &kp G                        &kp LEFT  &kp ENTER  &kp RIGHT  &kp H        &kp J        &kp K            &kp L    &kp SEMI  &kp SQT
&kp LCTRL          &mt LC(Z) Z   &mt LC(X) X   &mt LC(C) C    &mt LC(V) V    &kp B        &kp LEFT_GUI              &kp DOWN              &kp N        &kp M        &kp COMMA        &kp DOT  &kp FSLH  &kp LEFT_GUI
                                               &kp LEFT_ALT   &lt 1 SPACE    &lt 3 ENTER                                                  &lt 3 ENTER  &lt 2 SPACE  &kp RIGHT_SHIFT
            >;

            sensor-bindings = <&inc_dec_kp C_VOLUME_UP C_VOLUME_DOWN>;
        };

        lower_layer {
            display-name = "NUMBER";
            bindings = <
&kp ESC  &mt LA(Q) N1    &kp N2          &kp N3        &kp N4           &kp N5                                  &mmv MOVE_UP                     &kp N6    &kp N7     &kp N8  &kp N9     &kp N0    &kp BSPC
&kp Y    &kp INS         &mkp RCLK       &mkp MCLK     &mkp LCLK        &mkp MB4                &mmv MOVE_LEFT  &mkp LCLK       &mmv MOVE_RIGHT  &kp LEFT  &kp DOWN   &kp UP  &kp RIGHT  &kp HOME  &kp PG_UP
&kp P    &kp LEFT_ARROW  &kp DOWN_ARROW  &kp UP_ARROW  &kp RIGHT_ARROW  &mkp MB5  &kp C_MUTE                    &mmv MOVE_DOWN                   &none     &none      &none   &none      &kp END   &kp PG_DN
                                         &trans        &trans           &trans                                                                   &kp INS   &kp SPACE  &trans
            >;

            sensor-bindings = <&scroll_encoder>;
        };

        raise_layer {
            display-name = "SYMBOL";
            bindings = <
&kp ESC  &kp EXCL      &kp AT        &kp HASH   &kp DLLR   &kp PRCNT                            &mmv MOVE_UP                     &kp CARET  &kp AMPS   &kp ASTRK  &kp LPAR  &kp RPAR  &kp BSPC
&trans   &none         &mkp RCLK     &mkp MCLK  &mkp LCLK  &mkp MB4             &mmv MOVE_LEFT  &mkp LCLK       &mmv MOVE_RIGHT  &kp MINUS  &kp EQUAL  &kp LBKT   &kp RBKT  &kp BSLH  &kp GRAVE
&trans   &out OUT_USB  &out OUT_BLE  &none      &none      &mkp MB5   &trans                    &mmv MOVE_DOWN                   &kp UNDER  &kp PLUS   &kp LBRC   &kp RBRC  &kp PIPE  &mt LA(TILDE) TILDE
                                     &trans     &trans     &kp SPACE                                                             &kp RET    &trans     &trans
            >;

            sensor-bindings = <&scroll_encoder>;
        };

        layer_3 {
            display-name = "Fn";
            bindings = <
&kp DEL        &kp F1        &kp F2        &kp F3        &kp F4        &kp F5                                      &mmv MOVE_UP                     &kp F6       &kp F7     &kp F8       &kp F9      &kp F10          &kp F11
&kp BSPC       &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4                &mmv MOVE_LEFT  &bt BT_CLR_ALL  &mmv MOVE_RIGHT  &bootloader  &mkp LCLK  &mkp MCLK    &mkp RCLK   &kp PRINTSCREEN  &kp F12
&kp LG(LA(Z))  &none         &sys_reset    &bootloader   &trans        &mkp MB5      &bt BT_CLR                    &mmv MOVE_DOWN                   &trans       &trans     &bootloader  &sys_reset  &kp SCROLLLOCK   &kp PAUSE_BREAK
                                           &kp LA(END)   &trans        &trans                                                                       &trans       &trans     &trans
            >;

            sensor-bindings = <&scroll_encoder>;
        };
    };
};
